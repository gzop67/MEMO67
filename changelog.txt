[changelog]
  [101-020223] - Added guids to renderables, the guid is used to identify various structs, indexing htables, etc.
               - All sprites are now added to a hash table with their key being their renderable guid.
               - Framebuffers can now support a 'staging' texture slot for dx11 (just one currently). OpenGL version won't need one.
               - Added an additional gbuffer texture that renders the guid of relevant elements (i.e sprites).
               - Added a function to retreive a single pixel from the guid buffer.
               - Added proper primitive_destroy function that does all necessary cleanup.
               - Few fixes here and there. 
               - Note: opengl backend is currently lagging behind dx11 with addition of new features.

  [100-010223] - Fixed bug with frustum culling.
               - Added temporary frustum cull 'overdraw', should move to using bbox bounds for precise culling.
               - Added 'observer/fly cam'.
  [099-010223] - Added plane/ray intersect function.

  [098-310123] - Added one-shot line render.
               - Some minor changes to cameras and how frustums are stored.
               - Re-enabled sprite batcher with new depth sorting stuff, it's in a basic working mode, needs to be bullet-proofed.
               - Restructured the line renderer, no longer has a 'line_renderer' object, just basic functions. The new model is similar to 
               the primitive/collider/goji_handle.

  [097-300123] - Added on_collide functions for colliders.
               - Removed 'rect_2d', now there's just bbox and a separate collider struct.
               - A few minor changes to cameras and sprites.
               - Made a space-invaders-like game to test the engine/api (<300 lines). There are some obvious changes I'd make (and will make,
               most obvious are to do with how things/api interacts with handles and 'book-keeping' stuff).

  [095-290123] - Added functions to add colliders to sprites. Currently collisions are preempted when a sprite is moved,
               they are not all resolved as a single function, that'll come later when needed.
               - Changed layout of lights, point lights now support falloff and radius. (point lights currently not using 
               normals on the point light pass, will need to add another shader to use normals with lights for 3d model stuff).

  [094-280123] - Fixed some issues with depth sorting.
               - Input now uses a bitflag8 type, and some functions have been changed to improve response.
  [093-280123] - Added depth sorting, has temporarily broken batching.
               - Removed 'renderable' inheritance from text, not necessary, would require depth sorting to account for it.

  [092-270123] - Added sprite animator which handles animation functions (i.e play animation), 
               as well as specifying relevant data for the shader to use.
               - Testing things with an example scene.
               - Added build system stuff for examples.

  [091-260123] - Added uv tiling to sprites/sprite detail.
  [090-260123] - Fixed bug with dx11 sampling interpolated tex_ids, resulting in glitches when multiple textures
               are bound to a sprite batcher.
  [089-260123] - Fixed bitwise rgba parse being read backwards.
               - Fixed a few oversights from last lighting changes.
  [088-260123] - Lights now handle types properly.
               - Lights now have a separate constant buffer for point lights and directional lights, 
              this is to reduce loops in shaders, previously they were all packed together and first pass, as well as 
              second pass light shaders had the same constant buffers (i.e light count). The two pass lighting is to 
              support resolution independence for point lights and directional lights. (i.e, can crush resolution of either
              light types to improve performance if desired).
  [087-260123] - Changed GID references to handles, to avoid confusion with typical guid/uuids.

  [086-250123] - Added single header for projects to use with dynamic link build.
  [085-250123] - Textures now use a similar handle system as primitives.
  [084-250123] - Removed some redundancies, cleanup to core render loop.
  [083-250123] - Primitives now use a header/primitive pair, which can be
              looked up with a single handle. This is in keeping with decoupling render
              primitives from last version, whilst keeping code a lot cleaner and further
              decouples primitive data as external structures (renderables) keep no
              primitive data references, only a handle. This was a very large change and may require patches.

  [082-240123] - Decoupled render primitives and gapi buffer data. For better or worse, hopefully handles will be robust.
  [081-240123] - Changes to lighting primitives as well as main 'lights' container.
  [080-240123] - Added basics for a shared library build. Needs some decoupling of internals to keep the import header light.
               - Added basic example using a linked .dll build of the engine.
  [079-240123] - Line renderer now rendered as a forward pass before UI.

  [078-230123] - Text moved to a forward render pass, was causing unnecessary complications with main deferred pass.
  [077-230123] - Added aspect ratio to text.
               - Added rect and wrapping to text.
  [076-230123] - Added text resizing/changing.

  [075-220123] - Text shaders revised.
               - Deferred text v0 complete.

  [074-210123] - Fixed bugs with text uvs.
               - Sourced dx11 depth bug.
               - Fixed bug with passing colour data to buffer for text.
               - Vertex data buffer now void*, not float*.

  [073-200123] - Continued work on dx11 text backend.

  [072-190123] - Added text dx11 backend.

  [071-180123] - Commenting.

  [070-170123] - Minor cleanups.

  [069-160123] - Lighting cleanups.

  [068-150123] - Primitive union renaming.

  [067-140123] - Cleanups. 

  [066-130123] - Minor cleanup. 

  [065-120123] - Added primitive remove function, untested.

  [064-110123] - Added primitive handle.

  [063-100123] - Few cleanups.

  [062-090123] - Minor cleanups.

  [061-080123] - Fixed bug with bitmap text uvs.

  [060-070123] - Added bitmap text rendering, still some bugs to fix.

  [059-060123] - Temporary fix for depth buffer resolution mismatch for light pass.
  [058-060123] - Fixed bug with sprite batcher and normal data.

  [057-050123] - Cleaned up primitive_render code. Added some render stat stuff. Fixed HLSL deferred shaders.

  [056-040123] - Added depth buffer texture to opengl version of gbuffer pass, forgot about it.
  [055-040123] - Added functions to bind specific framebuffer slots.
               - Added functions to clear all render targets/attachments, necessary to individually clear for opengl
              as when attachments are of different size. (opengl renders the smallest of the attachments, so large ones are only partially
              cleared/drawn to when cleared together). Dx11 doesn't support rendertargets of different size, but they are cleared
              individually with ClearRenderTargetView() anyway." 

  [054-040123] - Added render view resize function.
               - Changed window creation to use AdjustWindowRect() (win32), necessary to get consistent resize between dx11 and opengl, 
               I think opengl's ndc are set with the initial gl context, so glViewport() sets the correct w/h without needing to adjust 
               to account for border/style sizes, whereas dx11 requires adjustment. Creating the window with AdjustWindowRect() normalises
               behaviour between dx11 and opengl.
  
  [053-030123] - Dx11 support for framebuffer stuff is in a working state.
               - Various API changes, relating to the new Dx11 changes.

  [052-020123] - Working on adding Dx11 support for the new framebuffer stuff.
               - Did a small 2.5D test (DST style). Cool.

  [051-010123] - Changelog updates.
  [050-010123] - Initial commits.

[changelog preface]

GitHub initial commit started at svn version [050], 010123.

[050-010123] contains the following features:

  -Framebuffer stuff.

  -Collisions (very basic, preemptive function).

  -Input handling (keyboard & mouse).

  -Timing (basic).

  -Line renderer.
    -Supports sdf-mode (as well as mesh mode) which renders lines as an sdf
      surface. Much slower, but cool.

  -SDF surface.
    -SDFs rendered in-shader with raymarching.
  
  -Camera (basic)
    -Orthographic and perspective.

  -Model, View, Projection matrices.

  -Matrices and Vectors (templated).
    -M4x4 matrices support SIMD multiplication.

  -Buffer resolution independence:
    -Lighting passes as well as final frame resolution can be set.

  -Lighting, directional and point.
    -Currently lights are deferred only. 
    -Rendered in two passes, first directional lights, then point lights.

  -Deferred rendering.
    -When deferred rendering is enabled, Goji's internal loop binds a deferred
    framebuffer, subsequent draw calls are then rendered to the gbuffer/s.
    Lighting is then rendered with the gbuffer/s as input (as well as lighting
    constant buffers) before finally rendering the frame to a quad.

  -Shader system:
    -Single .sha shader files are written containing both .hlsl and .glsl code, 
      the file separates the two shader languages, as well as vertex and pixel
      shaders with #defines.
    -Constant buffers.
    -Each 'default' (i.e part of Goji, not a custom added shader) shader corresponds to a enum value.
    -'Default' shaders include gbuffer variants, phong model, gouraud model, sprite, generic model, line, etc.

  -Sprite rendering with animation.

  -Sprite batcher.

  -OBJ model loader. (basic)

  -BMP image loader.

  -Dx11 and OpenGL3.3 backends. Current version [050] has not yet implemented
    Dx11 for the new framebuffer deferred stuff.

  -Custom data structures:
    -Dynamic array
    -Hashtable, current hash function starts with a constant and then uses a
      prime number table along with various circular shifts, additions,
      multiplications etc, works well enough for now.
    -Linked list (single)

Official start date 021122. - Project started 260922 with svn commit [001],
however, real work started on 021122 with svn commit [021].

--gojiblue

