[changelog]
  [260-260623] - Prototyping #0-22.

  [259-250623] - Cleanup.

  [258-240623] - Prototyping #0-21.

  [257-230623] - Prototyping #0-20.

  [256-220623] - Prototyping #0-19.

  [255-210623] - Prototyping #0-18.

  [254-200623] - Prototyping #0-17.

  [253-190623] - Cleanup.

  [252-180623] - Bug fixes, think there is a bug with untracking, some uid keys
  are colliding for some reason.

  [251-170623] - Added 'staging' pipeline for mesh renderers and sprite
  renderes, so that untracked renderers can be inserted into the render
  pipeline. Not sure if this route is ideal, may be replaced.

  [250-160623] - Cleanup.

  [249-150623] - Bug fixes.

  [248-140623] - Bug fixes.

  [247-130623] - Prototyping #0-16.

  [246-120623] - Prototyping #0-15.

  [245-110623] - Prototyping #0-14.

  [244-100623] - Prototyping #0-13.

  [243-090623] - Prototyping #0-12.

  [242-080623] - Clean up, mild refactors.

  [241-070623] - Resource packing/loading working for audio/meshes/textures now.
   Going to clean up redundancies.

  [240-070623] - Version 0 of resource file packing working for textures. DDS
  files are now packed to minimal representation in bundle (i.e discards unused
  data blocks beyond mips/pixels/header). Fixed bug with gstring/char* hashing.

  [239-060623] - Further work on resources/files etc. Drastic changes, almost
  done.

  [238-050623] - Working on resource file packing/loading, as well as general
  resource database/bundle system.

  [237-040623] - Cleaned up sprite 3d, skews and cardinals are more robust in
  regards to variabililty now. Fixed compiler warnings. Started on adding
  resource packing for single file resource files. Added zlib compression
  (wrapper around minimal third-party). Goji LOC is around 18k now (excl. zlib).

  [236-030623] - Fixed bug with instancing. Split first and second pass lighting
  framebuffers (b/c they are not guaranteed to be same dimensions). Added fixed
  8 skew sprite packer. Bug fixes.

  [235-020623] - Testing some graphics styles. Now sending model matrix as
  instance model data. Bug fixes and improvements.

  [234-010623] - Fixed shadows for new buffer setup. Working on render target
  setups. Bug fixes and cleanup.

  [233-310523] - Added custom gbuffer setup. Bug fixes and cleanup.

  [232-300523] - Meshes can now be separately rendered downscaled. Prototyping
  #0-11.

  [231-290523] - Get neighbouring colliders now returns with the uids sorted by
  distance to source. Prototyping #0-10.
  
  [230-280523] - Bug fixes.

  [229-270523] - Added generic outline shader that works for sprite, and mesh
  renderers. Mesh_renderer now renders select_id.

  [228-260523] - Prototyping #0-9.

  [227-250523] - Prototyping #0-8.

  [226-240523] - Added quadtree for colliders (no Y component, for now).
  Dynamic and static colliders are now stored on different tables, done for
  performance, couple of bugs to hammer out. Prototyping #0-7.

  [225-230523] - Added collision layer matrix, separated collision layer and
  collision trigger layer.  Prototyping #0-6.

  [224-220523] - Improvements to text. Prototyping #0-5.

  [223-210523] - Added audio loop stop. Added projectile motion. Replaced _force
  with _velocity, and added function add_force.

  [222-200523] - Audio bug fixes. Added width param to line instances.

  [221-190523] - Fixed issue with first mesh instance not being drawn. Added
  alpha_clip blend type. Other bug fixes and cleanup. Should be back on track
  for prototyping.

  [220-180523] - Added separate input layout shaders for directx. Removed
  shader_id from render_primitives, they only exist in standalone shaders now.
  Improvements to sprite batching and mesh instancing.

  [219-170523] - Cleaned up mesh instancine. Added various utility functions.
  Bug fixes. Added framebuffer resizing for injected passes.

  [218-160523] - Added mesh_renderer generic instancing, needs cleanup but
  working well. Optimised constant buffer update frequency. General
  improvements and bug fixes.

  [217-150523] - Added a few helper functions. Further work on custom pass
  injection. Prototyping #0-4.

  [216-140523] - Added custom shader pipeline. Added custom pass framebuffer
  injection for additional render passes outside of core render passes. Various
  bug fixes and cleanup.

  [215-130523] - Bug fixes. Started a refactor on shader stuff.

  [214-120523] - Fixed some minor memory leaks. Added hotloading for tiles.
  Bug fixes for gstring. Added wireframe cube/sphere debug. Prototyping #0-4.

  [213-110523] - Added function to render transparent sprites after other
  sprites, this is so I can use a different shader and not write to gbuf_wpos so
  shadows aren't stopped at the transparent sprite. Not ideal, replace it later.
  Added better encompass frustum function. Prototyping #0-3.

  [212-100523] - Added caching of meshes for mesh component. Prototyping #0-2.

  [211-090523] - General cleanup. Prototyping #0-1.

  [210-080523] - Added selectable component. Fixed shadow offset bug. Fixed
   asserts printing msgs regardless of fail/success.

  [209-070523] - Added csv loading. Added id to batching. Bug fixing and
   cleanup.

  [208-060523] - Implemented staging/map for id picking correctly, previously
  wasn't accounting for performance hit from synchronising cpu/gpu. Added
  precise sleep function, as well as cleaned up time functions. Added accurate
  fps limiting.

  [207-050523] - Added forward outline shader. Added feature to ensure same
  textures aren't reloaded. Working on selection.

  [206-040523] - Added ui sprite (forward rendered). Added billboard shader. 
  Added property component which is essentially a set a bitflags that can be 
  used for custom properties.

  [205-030523] - More bug fixing for collision/gojx. Added fixed time step for
   gojx updates. Collisions/gojx working as intended for now.

  [204-020523] - Bug fixing for collision/gojx.

  [203-010523] - Finishing basic collisions/gojx. Working well, just need to cleanup
  and better check objects moving at higher velocity, e.g some things are getting
  stuck in the ground when landing.

  [202-300423] - Working on physics collisons.

  [201-290423] - Added basic physics. Added bsphere and bbox colliders and
  intersection tests. Added sphere debug.

  [200-280423] - Bug fixes and optimisations. Added helper functions for :
  Converting RGB8, creating texture from colour, getting file extension, screen
  to ray, random V3F. Added load_audio function (.wav only for nonw). Added
  audio_loop function. Prototyping #0-0.

  [199-270423] - Added a few simd maths functions. Fixed bug with sprite
  shadows. Added render flags to mesh renderer and sprite renderer. Commit
  before starting prototype.

  [198-260423] - Added audio attenuation, spatial panning, audio source api.
   Removed runtime .glb, only using internal resources files. Bug fixing, general
   audio api work.

  [197-250423] - Added backend agnostic audio api. Fixed some bugs, and
  optimised sprite3d. Added variadic overload for input key state. Added
  on_lose_focus() callback. Audio api contains: 32 mono, 32 stereo voices, 2x music
  voices (for fades later), volume controls, music stop/start, mute/unmute,
  play_one_shot.

  [196-240423] - Improved sprite3d. Fixed sprite3d not maintaining its forward
   cardinal direction when camera changes forward direction. Added 2x2 matrix.
   Further testing, optimisations.

  [195-230423] - Added wireframe render pass for sprite/mesh. Optional (default)
   line_renderer as wireframe for sprites. Line_renderer now has each segment
   camera-facing. Fixed bug/lag with line_renderer. Removed mi_darray, replaced
   all instances with normal darray; there is a bug with it that caused
   indexing to return duplicate entries when iterating over the structure, know
   where the bug is but can't see obvious fix - temporarily removed.

  [194-220423] - Added 3d camera movement support to 3d sprites, works better
   than expected. Added variable skew counts. Tested animations without skew
   angles (works well). Started on xaudio2.

  [193-210423] - Fixed some bugs regarding flipped cardinal directions.
  Optimised _update_cardinal()_. Added support for sprite_renderer component
  shadows. Added proper support for packing sprites with variable
  skews/frame_counts. Added support for loading fewer(4/8) cardinal directions 
  than source sprites support.

  [192-200423] - Added camera skews for sprite 3d. Added forward vector to
  decern cardinal direction. Created UI for blender tool scripts.

  [191-190423] - Added 4/8/16 point cardinal support for packing/3d sprites.
   Fixed some bugs with sprite packing artifacts.

  [190-180423] - Added proper row packing support to sprite packer. Fixed
   partial row writes on sprite packer. Fixed some bugs with bmp writing.
   Continued work on 3d sprites.

  [189-170423] - Added custom binary mesh resource file format. Added 3d sprite
   component.

  [188-160423] - Fixed memory leak with _json_tree.release()_. Fixed bugs with
   material loading. Better handling of freeing resources when loading gltf/glb
   files. Improvements to json parser.

  [187-150423] - Fixed bugs with gltf material loading, better handling of 
   non-texture values (pbr/material values). 

  [186-140423] - Added support for loading .gltf files (json/bin/imgs), 
   previously only supported .glb. Added some util functions.

  [185-130423] - Added .dds texture loading. Testing compression stuff. Added
   proper controller support for windows/xbox. Added keymap layers, can add
   multiple keymap layers and switch to change context/input actions, works for
   both controller and keyboard. Other various bugfixes.

  [184-120423] - Added fast mipmap generation with diamond pattern box filter.
    Added mipmap loading if mips are present. Various cleanup and bugfixes.

  [183-110423] - Added box blur and gaussian resize filters.

  [182-100423] - Started to add controller abstraction. Added mips (wip). Added
  nearest neighbour resampling for manual mip generation (other interpolation
  methods later).

  [181-090423] - Fixed some bugs with point lights. Added mesh primitives. Added
    gizmo render mesh type (added some gizmo mesh primitives). Added skybox
    abstraction. General cleanup.

  [180-080423] - Fixed some issues with uid hash collisions. Added basic texture
    loading from gltf files, still needs work.

  [179-070423] - General cleanup, adding helper functions. Working on json_tree
    cleanup/release. Work to gltf api loading.

  [178-060423] - Added skyboxes.

  [177-050423] - Added bounding box component. Frustum culling by bounding box.
    working on configuring shadows. Improved gltf model loading, all submeshes
    now handled.

  [176-040423] - Adding gltf mesh loading abstraction, can load any .glb file's
    mesh data.

  [175-030423] - Added json_tree helper functions. Testing loading of gltf files.

  [175-030423] - Added json_tree helper functions. Testing loading of gltf files.

  [174-020423] - Added hash tables to json_tree for lookups.
  [173-020423] - Improved json parser, and fixed some parsing edges cases.

  [172-010423] - Json parser seems to be working, will need to check edge cases
    and track down any memory leaks.

  [171-310323] - Continued work on json parser.

  [170-300323] - Continued work on json parser.
  [169-300323] - Added basic string class.

  [168-290323] - Adding custom json parser.

  [167-280323] - Added temporary wip cgltf/png support. Models can now load with an
    index buffer.

  [166-270323] - Added basic sprite packer. Testing pseudo 3d sprites. Fixed
    some bugs with htable. Added alternate string hash (djb2).

  [165-260323] - General cleanup. Console log colours. Improved header
    separation.

  [164-250323] - Texture handles replaced with uids.
  [163-250323] - Replaced uuids with uids, previous implementation of uuids was
    not to standard spec. Improved uid generation, improved random_u64 generation.

  [162-240323] - Added managed index darray. Added material component. Added
    sprite batching for components. Added component debug print. Added
    sprites->combined mesh.

  [161-230323] - Further work to components. Htable improvements. (p.s uuid system
      was added in last few commits).
  [160-230323] - Base of component system working.

  [159-220323] - Improved htables, can now provide custom hash function. Started
                work on component system.
  [158-210323] - Added win32 min/max resizing, added on-focus callback (internal
      and external). Bug fixes.
  [157-210323] - Separated graphics context from platform context.

  [156-200323] - Aggressive file/folder restructuring.

  [155-190323] - Added framebuffer/texture/swapchain resizing.

  [154-180323] - Implemented fxaa paper. https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf

  [153-170323] - Cleanup. Work on post pass setup. Directional shadows working
                 with sprites.

  [152-160323] - Further cleanup and utility additions.

  [151-150323] - General cleanup.

  [150-140323] - Added shadow mapping for directional lights. Some changes to how depth textures are created and bound to framebuffers.

  [149-130323] - Game work[31].

  [148-120323] - Game work[30].

  [147-110323] - Fixed sdf stuff. Added shader hotloading (hlsl). Working on adding deferred directional shadows.
               - Game work[29].

  [146-100323] - Game work[28].

  [145-090323] - Fixed hotloading textures with non-power-of-2 dimensions.
               - Game work[27].

  [144-080323] - Added 'sprite bundle' that can load multiple quads from an .obj and load them as separate sprites.
               - Game work[26].

  [143-070323] - Sprites, models (and renderables) are now POD, there is no inheritance chain. This will likely be tuned in future.
               - Game work[25].

  [142-060323] - Started large renderable restructure to remove virtual functions / vtable stuff. 
               - Game work[24].

  [141-050323] - Game work[23].
  [140-050323] - Added hotload for textures. Added oneshot for text. Fixed target fps. Fixed _on_ms()_ not working correctly with multiple calls.

  [139-040323] - Game work[22].

  [138-030323] - Game work[21].
               
  [137-020323] - Added model load axis flip. Added load model->sprite (quad only).
               - Game work[20].

  [136-010323] - Added some new time functions (frame ms, internal avg fps). Added new hash function overload for char*, as well as new 
                htable comparison function. 
               - Game work[19].

  [135-280223] - Game work[18].

  [134-270223] - Game work[17].

  [133-260223] - Game work[16].

  [132-250223] - Game work[15].

  [131-240223] - Game work[14].

  [130-230223] - Added pivot to batched sprites.
               - Game work[13].

  [129-220223] - Fixed pivot scale offset.
               - Game work[12].

  [128-210223] - Game work[11].

  [127-200223] - Added pivot to sprite/pivot transformation.
               - Game work[10].

  [126-190223] - Added M4x4F inverse/determinant.
               - Game work[9].

  [125-180223] - Fixed bug with htable.contains_key().
               - Game work[8].

  [124-170223] - Game work[7].

  [123-160223] - Game work[6].
  [122-160223] - Added mouse scroll handling.
               - Models/sprites/batchers are now required to bind their own shader. At render, the currently bound shader is now used,
               not the shader of the primitive. May revert this in future.

  [121-150223] - Game work[5].
  [120-150223] - Added draw layers to renderables to improve draw call order.
               - Static batchers are now sent to normal draw call buffer.

  [119-140223] - Game work[4].

  [118-130223] - Game work[3].

  [117-120223] - Game work[2].

  [116-110223] - Game work[1].
               - Added basic tileset.

  [115-100223] - Game work[0].
  [114-090223] - Continuing some example testing.
               - Added near sprite transparency in main sprite shader.
               - Some changes to camera data updating.
               - Added vignette and blur to deferred quad shader.

  [113-080223] - Added basic 'ui-sprite'.
               - Some further example testing.
  [112-080223] - Separated sprite batcher stuff into its own source.
               - Cleaned up batcher api.
  [111-080223] - Added caching of sprite various densities. 
               - Sprite batchers now have a fixed size, and buffers are allocated with a maximum size on initialisation.
               If a batch call (begin/end) exceeds the limit, the buffered sprites get subdivided into another batch (separate draw call).

  [110-070223] - Added sprite density function, which basically generates the relevant data for a plane mesh with subdivisions.
               - Added render support for various density sprites.
               - Sprite batcher now is agnostic to sprite mesh densities.
               - Static sprite build support various sprite densities.
               - Added camera pos to view matrix constant buffer to allow for 'world bending'. (May move to separate cbuf in future).

  [109-060223] - Added contains_key function to hashtables.
               - Changed depth sorting to use quicksort instead of bubblesort. 
  [108-060223] - Added ping-pong to sprite animator.
               - Deferred render now holds onto the last drawn frame until
               _after_ the update callback function. This is to enable sampling of gbuffer textures if necessary (i.e guid/picking frame).
               - Sprite batcher draw procedure has been changed to enable the deferred frame changes. Batches now cache data, similar to 
               renderable procedure.
  [107-060223] - Added draw debug flag to engine properties.
               - Added mouse clicks to input.

  [106-050223] - DX shaders now add #defines on shader compile (will add ogl later).
               - Lights are now checked if visible before sending to gpu. (precursor to quadtree)
               - Lights now use handle system.
               - Removed references to 'fastlights'
               - Added 'on_ms' function.

  [105-050223] - Added framebuffer render texture formats for 16 and 32 bit.
               - Fixed bug with point light rendering.

  [104-040223] - Minor cleanup.

  [103-030223] - Added general purpose handle manager.
               - Added guid picking data to sprite batching.
  [102-030223] - Added sprite batcher depth sorting.
               - Some changes to benchmarking functions.

  [101-020223] - Added guids to renderables, the guid is used to identify various structs, indexing htables, etc.
               - All sprites are now added to a hash table with their key being their renderable guid.
               - Framebuffers can now support a 'staging' texture slot for dx11 (just one currently). OpenGL version won't need one.
               - Added an additional gbuffer texture that renders the guid of relevant elements (i.e sprites).
               - Added a function to retreive a single pixel from the guid buffer.
               - Added proper primitive_destroy function that does all necessary cleanup.
               - Few fixes here and there. 
               - Note: opengl backend is currently lagging behind dx11 with addition of new features.

  [100-010223] - Fixed bug with frustum culling.
               - Added temporary frustum cull 'overdraw', should move to using bbox bounds for precise culling.
               - Added 'observer/fly cam'.
  [099-010223] - Added plane/ray intersect function.

  [098-310123] - Added one-shot line render.
               - Some minor changes to cameras and how frustums are stored.
               - Re-enabled sprite batcher with new depth sorting stuff, it's in a basic working mode, needs to be bullet-proofed.
               - Restructured the line renderer, no longer has a 'line_renderer' object, just basic functions. The new model is similar to 
               the primitive/collider/goji_handle.

  [097-300123] - Added on_collide functions for colliders.
               - Removed 'rect_2d', now there's just bbox and a separate collider struct.
               - A few minor changes to cameras and sprites.
               - Made a space-invaders-like game to test the engine/api (<300 lines). There are some obvious changes I'd make (and will make,
               most obvious are to do with how things/api interacts with handles and 'book-keeping' stuff).

  [095-290123] - Added functions to add colliders to sprites. Currently collisions are preempted when a sprite is moved,
               they are not all resolved as a single function, that'll come later when needed.
               - Changed layout of lights, point lights now support falloff and radius. (point lights currently not using 
               normals on the point light pass, will need to add another shader to use normals with lights for 3d model stuff).

  [094-280123] - Fixed some issues with depth sorting.
               - Input now uses a bitflag8 type, and some functions have been changed to improve response.
  [093-280123] - Added depth sorting, has temporarily broken batching.
               - Removed 'renderable' inheritance from text, not necessary, would require depth sorting to account for it.

  [092-270123] - Added sprite animator which handles animation functions (i.e play animation), 
               as well as specifying relevant data for the shader to use.
               - Testing things with an example scene.
               - Added build system stuff for examples.

  [091-260123] - Added uv tiling to sprites/sprite detail.
  [090-260123] - Fixed bug with dx11 sampling interpolated tex_ids, resulting in glitches when multiple textures
               are bound to a sprite batcher.
  [089-260123] - Fixed bitwise rgba parse being read backwards.
               - Fixed a few oversights from last lighting changes.
  [088-260123] - Lights now handle types properly.
               - Lights now have a separate constant buffer for point lights and directional lights, 
              this is to reduce loops in shaders, previously they were all packed together and first pass, as well as 
              second pass light shaders had the same constant buffers (i.e light count). The two pass lighting is to 
              support resolution independence for point lights and directional lights. (i.e, can crush resolution of either
              light types to improve performance if desired).
  [087-260123] - Changed GID references to handles, to avoid confusion with typical guid/uuids.

  [086-250123] - Added single header for projects to use with dynamic link build.
  [085-250123] - Textures now use a similar handle system as primitives.
  [084-250123] - Removed some redundancies, cleanup to core render loop.
  [083-250123] - Primitives now use a header/primitive pair, which can be
              looked up with a single handle. This is in keeping with decoupling render
              primitives from last version, whilst keeping code a lot cleaner and further
              decouples primitive data as external structures (renderables) keep no
              primitive data references, only a handle. This was a very large change and may require patches.

  [082-240123] - Decoupled render primitives and gapi buffer data. For better or worse, hopefully handles will be robust.
  [081-240123] - Changes to lighting primitives as well as main 'lights' container.
  [080-240123] - Added basics for a shared library build. Needs some decoupling of internals to keep the import header light.
               - Added basic example using a linked .dll build of the engine.
  [079-240123] - Line renderer now rendered as a forward pass before UI.

  [078-230123] - Text moved to a forward render pass, was causing unnecessary complications with main deferred pass.
  [077-230123] - Added aspect ratio to text.
               - Added rect and wrapping to text.
  [076-230123] - Added text resizing/changing.

  [075-220123] - Text shaders revised.
               - Deferred text v0 complete.

  [074-210123] - Fixed bugs with text uvs.
               - Sourced dx11 depth bug.
               - Fixed bug with passing colour data to buffer for text.
               - Vertex data buffer now void*, not float*.

  [073-200123] - Continued work on dx11 text backend.

  [072-190123] - Added text dx11 backend.

  [071-180123] - Commenting.

  [070-170123] - Minor cleanups.

  [069-160123] - Lighting cleanups.

  [068-150123] - Primitive union renaming.

  [067-140123] - Cleanups. 

  [066-130123] - Minor cleanup. 

  [065-120123] - Added primitive remove function, untested.

  [064-110123] - Added primitive handle.

  [063-100123] - Few cleanups.

  [062-090123] - Minor cleanups.

  [061-080123] - Fixed bug with bitmap text uvs.

  [060-070123] - Added bitmap text rendering, still some bugs to fix.

  [059-060123] - Temporary fix for depth buffer resolution mismatch for light pass.
  [058-060123] - Fixed bug with sprite batcher and normal data.

  [057-050123] - Cleaned up primitive_render code. Added some render stat stuff. Fixed HLSL deferred shaders.

  [056-040123] - Added depth buffer texture to opengl version of gbuffer pass, forgot about it.
  [055-040123] - Added functions to bind specific framebuffer slots.
               - Added functions to clear all render targets/attachments, necessary to individually clear for opengl
              as when attachments are of different size. (opengl renders the smallest of the attachments, so large ones are only partially
              cleared/drawn to when cleared together). Dx11 doesn't support rendertargets of different size, but they are cleared
              individually with ClearRenderTargetView() anyway." 

  [054-040123] - Added render view resize function.
               - Changed window creation to use AdjustWindowRect() (win32), necessary to get consistent resize between dx11 and opengl, 
               I think opengl's ndc are set with the initial gl context, so glViewport() sets the correct w/h without needing to adjust 
               to account for border/style sizes, whereas dx11 requires adjustment. Creating the window with AdjustWindowRect() normalises
               behaviour between dx11 and opengl.
  
  [053-030123] - Dx11 support for framebuffer stuff is in a working state.
               - Various API changes, relating to the new Dx11 changes.

  [052-020123] - Working on adding Dx11 support for the new framebuffer stuff.
               - Did a small 2.5D test (DST style). Cool.

  [051-010123] - Changelog updates.
  [050-010123] - Initial commits.

[changelog preface]

GitHub initial commit started at svn version [050], 010123.

[050-010123] contains the following features:

  -Framebuffer stuff.

  -Collisions (very basic, preemptive function).

  -Input handling (keyboard & mouse).

  -Timing (basic).

  -Line renderer.
    -Supports sdf-mode (as well as mesh mode) which renders lines as an sdf
      surface. Much slower, but cool.

  -SDF surface.
    -SDFs rendered in-shader with raymarching.
  
  -Camera (basic)
    -Orthographic and perspective.

  -Model, View, Projection matrices.

  -Matrices and Vectors (templated).
    -M4x4 matrices support SIMD multiplication.

  -Buffer resolution independence:
    -Lighting passes as well as final frame resolution can be set.

  -Lighting, directional and point.
    -Currently lights are deferred only. 
    -Rendered in two passes, first directional lights, then point lights.

  -Deferred rendering.
    -When deferred rendering is enabled, Goji's internal loop binds a deferred
    framebuffer, subsequent draw calls are then rendered to the gbuffer/s.
    Lighting is then rendered with the gbuffer/s as input (as well as lighting
    constant buffers) before finally rendering the frame to a quad.

  -Shader system:
    -Single .sha shader files are written containing both .hlsl and .glsl code, 
      the file separates the two shader languages, as well as vertex and pixel
      shaders with #defines.
    -Constant buffers.
    -Each 'default' (i.e part of Goji, not a custom added shader) shader corresponds to a enum value.
    -'Default' shaders include gbuffer variants, phong model, gouraud model, sprite, generic model, line, etc.

  -Sprite rendering with animation.

  -Sprite batcher.

  -OBJ model loader. (basic)

  -BMP image loader.

  -Dx11 and OpenGL3.3 backends. Current version [050] has not yet implemented
    Dx11 for the new framebuffer deferred stuff.

  -Custom data structures:
    -Dynamic array
    -Hashtable, current hash function starts with a constant and then uses a
      prime number table along with various circular shifts, additions,
      multiplications etc, works well enough for now.
    -Linked list (single)

Official start date 021122. - Project started 260922 with svn commit [001],
however, real work started on 021122 with svn commit [021].

--gojiblue

